extends /templates/_layouts/default

block append pageVariables
    - var moduleTitle = "Tools - Simulation"
    - var state = "filled"
    - var data = contentData.simulation
    -
        var smartServices = [
            {
                id: 0,
                name: 'Select'
            },
            {
                id: 1,
                name: 'I provide a service in exchange for a salary'
            },
            {
                id: 2,
                name: 'I continue my Smart activity'
            },
            {
                id: 3,
                name: 'I carry out an interim assignment on behalf of a client'
            },
        ]

        var contractTypes = [
            {
                id: 0,
                name: 'Select'
            },
            {
                id: 1,
                name: 'Artistic'
            },
            {
                id: 2,
                name: 'Non-artistic',
            },
            {
                id: 3,
                name: 'Student'
            },
        ]

        var jointCommissions = [
            {
                id: 0,
                name: 'Select',
            },
            {
                id: 1,
                name: 'Performing arts - CP304 (CCT performing arts)',
            },
            {
                id: 2,
                name: 'Music - CP 304 (CCT music)',
            },
            {
                id: 3,
                name: 'Dramatic Art - CP 304 (CCT Dramatic Performing Arts)',
            },
            {
                id: 4,
                name: 'Film industry (feature films) - CP 303.01',
            },
            {
                id: 5,
                name: 'Operation of cinemas - CP 303.03',
            },
            {
                id: 6,
                name: 'Dubbing - CCT dubbing',
            },
            {
                id: 7,
                name: 'Audiovisual other - CP 227',
            },
            {
                id: 8,
                name: 'Sociocultural Flemish Community - CP 329.01',
                subCommittees: [
                    {
                        id: 0,
                        name: 'Select',
                    },
                    {
                        id: 1,
                        name: 'Sociocultural work',
                    },
                    {
                        id: 2,
                        name: 'Integration centers and social animation',
                    },
                    {
                        id: 3,
                        name: 'Socio-professional integration',
                    },
                ]
            },
            {
                id: 9,
                name: 'Sociocultural Walloon Region and French and German-speaking Community - CP 329.02',
                subCommittees: [
                    {
                        id: 0,
                        name: 'Select',
                    },
                    {
                        id: 1,
                        name: 'Work, employment, socio-professional integration in the Walloon Region'
                    },
                    {
                        id: 2,
                        name: 'Continuing education sub-committee in the French Community',
                    },
                    {
                        id: 3,
                        name: 'Professional integration in the Brussels Region',
                    },
                ]
            },
            {
                id: 10,
                name: 'Joint sub-committee for federal and bicommunity socio-cultural organizations in the Brussels Region - CP 329.03',
            },
            {
                id: 11,
                name: 'Auxiliary joint committee for employees - CP 200',
            },
            {
                id: 12,
                name: 'Joint sub-committee for federal and bicommunity socio-cultural organizations in the Brussels Region - CP 329.03',
            },
            {
                id: 13,
                name: 'Other',
            },
            {
                id: 14,
                name: 'Work carried out abroad for a principal established abroad',
            },
            {
                id: 15,
                name: 'Public authorities (no PC)'
            }
        ]

block content

    .c-navbar.c-navbar--bordered-bottom
        .c-toolbar
            .c-toolbar__left
                .c-toolbar__item
                    h2.c-toolbar__title Simulation
    .u-scroll-wrapper-body

        form.o-grid(x-data="validateForm()" x-init="init()"  x-on:submit.prevent="submit();" id="form")
            .o-grid-col-bp3-6
                .u-spacer-l
                    template(x-if="hasErrors")
                        .u-spacer-bottom-l
                            +c-alert({
                                skin: 'error',
                                message: 'The simulation form couldn\'t be submitted, please correct the errors below.'
                            })
                    .c-panel

                        .o-form-group-layout.o-form-group-layout--horizontal
                            .c-panel__body
                                +c-form-group({label: 'Smart service',id: 'smartService', helperTooltip: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed commodo accumsan risus.', isFullWidth: true })
                                    +c-select({id: 'smartService', value: smartServices, key: 'name', valueKey: 'id'})(x-model="service" :class="{'c-select--error': validation.service.error}" x-on:change="showVat = ($event.target.value == 1 || $event.target.value == 3), showJointCommission = ($event.target.value == 3)")
                                    template(x-if="validation.service.error")
                                        p.c-form-help-text.c-form-help-text--error(x-text="validation.service.message")

                                //- Only show this set of fields if Smart service is I provide a service in exchange for a salary || I carry out an interim assignment on behalf of a client
                                template(x-if="showVat")
                                    +c-form-group({label: 'VAT', id: 'vatId', helperTooltip: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed commodo accumsan risus.', isFullWidth: true })
                                        .o-flex.o-flex--spaced
                                            +c-select({ id: 'vatType', value: ['Select', 'Included', 'Not included', 'No VAT'] })
                                            +c-radio-group({ name: 'vatRate', value: ['6%', '21%'], isInline: true })

                                +c-form-group({label: 'Contract type', id: 'contractType'})
                                    +c-select({id: 'contractType', value: contractTypes, key: 'name', valueKey: 'id' })(x-model="contractType" :class="{'c-select--error': validation.contractType.error}")
                                    template(x-if="validation.contractType.error")
                                        p.c-form-help-text.c-form-help-text--error(x-text="validation.contractType.message")

                            //- Only show this set of fields if Smart service is I carry out an interim assignment on behalf of a client
                            .c-panel__body(x-show="showJointCommission")
                                +c-form-group({label: 'Joint commission',id: 'jointCommission', helperTooltip: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed commodo accumsan risus.', isFullWidth: true })
                                    +c-select({id: 'contractType', value: jointCommissions, key: 'name', valueKey: 'id' })(x-model="jointCommission" x-on:change="showSubCommittees = ($event.target.value == 8) || ($event.target.value == 9) ")

                                div(x-show="showSubCommittees")
                                    div(x-show="jointCommission == 8")
                                        +c-form-group({label: 'Subcommittee', id: 'subCommittee', helperTooltip:  'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed commodo accumsan risus.', isFullWidth: true})
                                            +c-select({id: 'subCommittee', value: jointCommissions[8].subCommittees, key: 'name', valueKey: 'id'})

                                    div(x-show="jointCommission == 9")
                                        +c-form-group({label: 'Subcommittee', id: 'subCommittee', helperTooltip:  'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed commodo accumsan risus.', isFullWidth: true})
                                            +c-select({id: 'subCommittee', value: jointCommissions[9].subCommittees, key: 'name', valueKey: 'id'})

                            .c-panel__body
                                +c-form-group({label: 'Amount', id: 'amount', helperTooltip:  'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed commodo accumsan risus.'})
                                    .o-flex.o-flex--spaced
                                        +c-select({ id: 'amountType', value: ['Select', 'Billing amount', 'Net to pay', 'Gross salary'] })(x-model="amountType" :class="{'c-select--error': validation.amountType.error}" )
                                        +c-input-group-after({ type: 'number', id: 'amountValue', text: 'â‚¬', inputType: 'number' })(x-model="amountValue" :class="{'c-input--error': validation.amountValue.error}" )
                                    template(x-if="validation.amountType.error")
                                        p.c-form-help-text.c-form-help-text--error(x-text="validation.amountType.message")
                                    template(x-if="validation.amountValue.error")
                                        p.c-form-help-text.c-form-help-text--error(x-text="validation.amountValue.message")

                                +c-form-group({label: 'Number of days', id: 'numberOfDays'})
                                    +c-input({id: 'numberOfDays', type: 'number'})(x-model="numberOfDays" :class="{'c-input--error': validation.numberOfDays.error}" )
                                    template(x-if="validation.numberOfDays.error")
                                        p.c-form-help-text.c-form-help-text--error(x-text="validation.numberOfDays.message")

                                +c-form-group({label: 'Defrayal (per day)', id: 'defrayalPerDay', helperTooltip: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed commodo accumsan risus.'})
                                    +c-input-group-after({id: 'defrayalPerDay', type: 'number', text: 'â‚¬'})

                                +c-form-group({ label: 'Withholding tax', id: 'withHoldingTax', helperTooltip: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed commodo accumsan risus.' })
                                    +c-input-group-after({id: 'withHoldingTax', type: 'number', icon: 'percent'})

                    .u-spacer-top
                        .c-toolbar
                            .c-toolbar__right
                                .c-toolbar__item
                                    input.c-button.c-button--secondary(type="reset" value="Reset" x-on:click="reset()")
                                    +c-button({ isLoading: true })(x-show="isLoading") Calculate
                                    +c-button({ skin: 'primary', type: 'submit'})(x-show="!isLoading")
                                        | Calculate


            .o-grid-col-bp3-6
                .u-maximize-height(x-ref="result")
                    .o-flex.o-flex--vertical.o-flex--center.u-maximize-height
                        .u-spacer-l
                            .c-blank-slate
                                +c-avatar({icon: 'document', size: 'large'})
                                p.u-text-muted.c-body-1 Fill in the form to view a calculation


    script.
        window.validateForm = function () {
            return {
                //- Data
                service: '',
                vatRate: '',
                contractType: '',
                jointCommission: '',
                subCommittee: '',
                amountType: '',
                amountValue: '',
                numberOfDays: '',
                showVat: false,
                showJointCommission: false,
                showSubCommittees: false,
                isLoading: false,
                hasErrors: false,

                //- Validation rules for each input
                validation: {
                    service: {
                        rule: {
                        required: function (field) {
                            if (field && field != 0) {
                            return { error: false, message: '' }
                            } else {
                                return { error: true, message: 'The Smart service is required.' }
                            }
                        },
                        },
                        error: false,
                        message: ''
                    },
                    contractType: {
                        rule: {
                        required: function (field) {
                            if (field && field != 0) {
                            return { error: false, message: '' }
                            } else {
                                return { error: true, message: 'The contract type is required.' }
                            }
                        },
                        },
                        error: false,
                        message: ''
                    },
                    amountType: {
                        rule: {
                        required: function (field) {
                            if (field && field != 'Select') {
                            return { error: false, message: '' }
                            } else {
                                return { error: true, message: 'The amount type is required.' }
                            }
                        },
                        },
                        error: false,
                        message: ''
                    },
                    amountValue: {
                        rule: {
                        required: function (field) {
                            if (field && field.length > 0) {
                            return { error: false, message: '' }
                            } else {
                                return { error: true, message: 'The amount is required.' }
                            }
                        },
                        minValue: function (field) {
                            if (field > 0) {
                            return { error: false, message: '' }
                            } else {
                                return { error: true, message: 'The amount should be greater than 0.' }
                            }
                        },
                        },
                        error: false,
                        message: ''
                    },
                    numberOfDays: {
                        rule: {
                        required: function (field) {
                            if (field.length > 0) {
                            return { error: false, message: '' }
                            } else {
                                return { error: true, message: 'The number of days is required.' }
                            }
                        },
                        minValue: function (field) {
                            if (field > 0) {
                            return { error: false, message: '' }
                            } else {
                                return { error: true, message: 'The number of days should be greater than 0.' }
                            }
                        },
                        },
                        error: false,
                        message: ''
                    },
                },
                validate(field) {
                    for (const key in this.validation[field].rule) {
                        const validationResult = this.validation[field].rule[key](this[field])
                        if (validationResult.error) {
                        this.validation[field].error = true
                        this.validation[field].message = validationResult.message
                        break
                        }
                        this.validation[field].error = false
                        this.validation[field].message = ''
                        continue
                    }
                },

                //- Reset function
                reset: function () {
                    this.showVat = false;
                    this.showJointCommission = false;
                    this.showSubCommittees = false;
                    this.hasErrors = false;
                    this.validation.service.error = false;
                    this.validation.contractType.error = false;
                    this.validation.amountType.error = false;
                    this.validation.amountValue.error = false;
                    this.validation.numberOfDays.error = false;
                    fetch('/partials/simulation-empty.html').then(response => response.text()).then(html => {isLoading = false; this.$refs.result.innerHTML = html });
                },

                //- Watch fields
                init: function() {
                    this.$watch('service', value => { this.validate('service') });
                    this.$watch('contractType', value => { this.validate('contractType') });
                    this.$watch('amountType', value => { this.validate('amountType') });
                    this.$watch('amountValue', value => { this.validate('amountValue') });
                    this.$watch('numberOfDays', value => { this.validate('numberOfDays') });
                },

                //- Validation when submitting
                submit: function() {
                    this.validate('service');
                    this.validate('contractType');
                    this.validate('amountType');
                    this.validate('amountValue');
                    this.validate('numberOfDays');
                    if (this.validation.service.error || this.validation.contractType.error || this.validation.amountType.error || this.validation.amountValue.error || this.validation.numberOfDays.error) {
                        this.hasErrors = true;
                        fetch('/partials/simulation-empty.html').then(response => response.text()).then(html => {isLoading = false; this.$refs.result.innerHTML = html });
                        return;
                    } else {
                        this.hasErrors = false;
                    }
                    isLoading = true;
                    fetch('/partials/simulation-result.html').then(response => response.text()).then(html => {isLoading = false; this.$refs.result.innerHTML = html });
                }
            }
         }
